# k8s_master_init.yml

- hosts: masters
  #remote_user: k8s5gc
  remote_user: vmadmin
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh

  vars_prompt:

    - name: "control_plane_ep"
      prompt: "Enter the DNS name of the control plane load balancer?"
      private: no

    - name: "metal_lb_range"
      prompt: "Enter the IP range from which the load balancer IP can be assigned?"
      private: no 
      default: 192.168.68.200-192.168.69.210 

          #- name: "pod_network_cidr"
          #prompt: "Enter the Pod Network CIDR, example: 192.168.100.0/24"
          #private: no

          #- name: "k8s_master_ip"
          #prompt: "Enter the Apiserver advertise address, example: 192.168.0.26"
          #private: no

          #- name: "pod_network_manifest_file"
          #prompt: "Enter the Pod network manifest file URL, Your choice could be flannel, weave or calico, etc."
          #private: no

          #- name: "rbac_manifest_file"
          #prompt: "Enter the RBAC manifest file URL"
          #private: no


  tasks:

   - name: Initializing Kubernetes Cluster
     #     command: kubeadm init --pod-network-cidr 10.244.0.0/16 --control-plane-endpoint "{{ ansible_eno1.ipv4.address }}:6443" --upload-certs
     command: kubeadm init --pod-network-cidr 10.244.0.0/16 --control-plane-endpoint "{{ control_plane_ep }}:6443" --upload-certs
     #command: kubeadm init --pod-network-cidr 10.244.0.0/16 --upload-certs
     run_once: true
     #delegate_to: "{{ k8s_master_ip }}"

   - pause: seconds=30

   - name: Create directory for kube config.
     #become_user: k8s5gc`
     #become_method: sudo
     #become: yes
     file:
       path: /home/{{ansible_user }}/.kube
       state: directory
       owner: "{{ ansible_user }}"
       group: "{{ ansible_user }}"
       mode: 0755

   - name: Copy /etc/kubernetes/admin.conf to user home directory /home/{{ ansible_user }}/.kube/config.
     #become_user: root
     #become_method: sudo
     #become: yes
     copy:
       src: /etc/kubernetes/admin.conf
       dest: /home/{{ ansible_user }}/.kube/config
       remote_src: yes
       owner: "{{ ansible_user }}"
       group: "{{ ansible_user }}"
       mode: '0644'

   - pause: seconds=30

   - name: Remove the cache directory.
     #become_user: k8s5gc
     #become_method: sudo
     #become: yes
     file:
       path: /home/{{ ansible_user }}/.kube/cache
       state: absent

   - name: Create Pod Network & RBAC.
     become_user: vmadmin
     become_method: sudo
     become: yes
     command: "{{ item }}"
     with_items:
        - curl https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml -o /home/{{ ansible_user }}/kube-flannel.yml
        - sed -i 's/io\/v1beta1/io\/v1/' /home/{{ ansible_user }}/kube-flannel.yml
        - kubectl apply -f /home/{{ ansible_user }}/kube-flannel.yml
        - rm /home/{{ ansible_user }}/kube-flannel.yml  
          #- kubectl apply -f {{ pod_network_manifest_file }}        
          #- kubectl apply -f {{ rbac_manifest_file }}

   - pause: seconds=30

   - name: Get the token for joining the nodes with Kuberentes master.
     shell: kubeadm token create  --print-join-command
     register: kubernetes_join_command

   - debug:
       msg: "{{ kubernetes_join_command.stdout }}"

   - name: Copy join command to local file.
     become: false
     local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="/tmp/kubernetes_join_command" mode=0777

   - name: Installing Nginx Ingress Controller
     become_user: vmadmin
     become_method: sudo
     become: yes     
     command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.5/deploy/static/provider/cloud/deploy.yaml
     run_once: true
     #delegate_to: "{{ k8s_master_ip }}"

   - name: FIXME
     become_user: vmadmin
     become_method: sudo
     become: yes
     command: kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission
     run_once: true
     #delegate_to: "{{ k8s_master_ip }}"     

   - name: Install Metallb1.
     become_user: vmadmin
     become_method: sudo
     become: yes
     shell: 'kubectl -n kube-system get configmap kube-proxy -o yaml > /home/vmadmin/kube-proxy.yml'

   - name: Install Metallb2.
     become_user: vmadmin
     become_method: sudo
     become: yes
     command: "{{ item }}"
     with_items:
       - "sed -i 's/strictARP: false/strictARP: true/' /home/{{ ansible_user }}/kube-proxy.yml"
       - kubectl apply -f /home/{{ ansible_user }}/kube-proxy.yml
       - rm /home/{{ ansible_user }}/kube-proxy.yml
       - kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.11.0/manifests/namespace.yaml
       - kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.11.0/manifests/metallb.yaml     
       - "cp {{ playbook_dir }}/metallb/metalb-cm.yml {{ playbook_dir }}/metallb/metalb-cm1.yml" 
       - "sed -i 's/##-##/{{ metal_lb_range }}/' {{ playbook_dir }}/metallb/metalb-cm1.yml"  
       - "kubectl apply -f {{ playbook_dir }}/metallb/metalb-cm1.yml"
         #- "rm {{ playbook_dir }}/metallb/metalb-cm1.yml"  
...

